################################ 
# How to Use:
# 1. If there are no changes to requirements:
# poetry install
#
# 2. For changes to requirements:
# User pypoetry caches are located at different locations depending on system.
# Linux:
# PYPOETRY_CACHE=$HOME/.cache/pypoetry
# OS X:
# PYPOETRY_CACHE=$HOME/Library/Caches/pypoetry
#
# poetry cache clear . --all
# rm poetry.lock
# rm -r $PYPOETRY_CACHE/cache
# rm -r $PYPOETRY_CACHE/artifacts
# poetry lock
# poetry-dynamic-versioning
# poetry build
# poetry install
# poetry run pytest tests/
# poetry run mypy
# poetry run ruff check
################################

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
#metadata = true
#dirty = true
#style = "semver"
#format = "v{base}+{distance}.{commit}"
pattern  = "^v(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"
format-jinja = """
    {%- if distance == 0 -%}
        {{- base -}}
    {%- else -%}
        {{- base }}.dev{{ distance }}+g{{commit}}
    {%- endif -%}
"""

[tool.poetry]
name = "leash-BELKA"
version = "0.0.0"
description = "This is the kaggle competition leash-belka"
authors = ["Come Raczy <come.raczy@google.com>"]
maintainers = [
  "Come Raczy <come.raczy@google.com>",
]
repository = "https://github.com/come-raczy/kaggle-competitions"
documentation = "https://come-raczy.github.io/kaggle-competitions/"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
]
packages = [
  {include = "leash_BELKA"}
]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
poetry-dynamic-versioning = {extras = ["plugin"], version = "^1.2.0"}
rdkit = {version = ">=2023.9.5", markers = "python_version >= '3.8'"}
xgboost = ">=2.0.3"

[tool.poetry.group.dev.dependencies]
# Add a private package
#omtx-package ={version="^0.2.1", source="omtx"}
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
deptry = "^0.12.0"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
tox = "^4.11.1"

# Add a private pypi repository
# [[tool.poetry.source]]
# name = "omtx"
# url = "https://pypi.omtx.ai"
# default = false
# secondary = true

[tool.poetry.scripts]
train = "leash_BELKA.train:train"
predict = "leash_BELKA.predict:predict"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
# original backend without dynamic versioning:
#build-backend = "poetry.core.masonry.api"
build-backend = "poetry_dynamic_versioning.backend"

[tool.mypy]
files = ["leash_BELKA"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["-ra", "--cov=leash_BELKA", "--cov-report=term-missing", "--cov-fail-under=70"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["leash_BELKA"]

[tool.ruff]
target-version = "py37"
line-length = 120
fix = true
lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Avoid specifying long messages outside the exception class
    "TRY003", 
]

[tool.ruff.format]
preview = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

